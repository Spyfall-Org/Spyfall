name: Pull Request Workflow

on:
  # Triggers the workflow for pull requests into any (**) base branch
  pull_request:
    branches:
      - "**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# ensures only 1 of these workflows can exist on a PR at a time. Cancels old ones when new ones are triggered
concurrency:
  group: pr-workflow-${{ github.head_ref }}
  cancel-in-progress: true

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Create Service Key Json
        id: create-json
        uses: jsdaniell/create-json@v1.2.2
        with:
          name: "service_key.json"
          json: ${{ secrets.SERVICE_ACCOUNT_KEY }}

      - name: Download Secret Files
        run: ./scripts/get_secret_files.main.kts service_key.json

      - name: Set Up Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Copy gradle properties file
        run: mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties

      - name: Set Up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '11'

      - name: Set spyfall release environment variable
        run: |
          if [[ $GITHUB_HEAD_REF =~ release-spyfall ]]; then
            echo "isSpyfallReleasePR=true" >> $GITHUB_ENV
          else
            echo "isSpyfallReleasePR=false" >> $GITHUB_ENV
          fi

      - name: Set werewolf release environment variable
        run: |
          if [[ $GITHUB_HEAD_REF =~ release-werewolf ]]; then
            echo "isWerewolfReleasePR=true" >> $GITHUB_ENV
          else
            echo "isWerewolfReleasePR=false" >> $GITHUB_ENV
          fi

      - name: Echo werewolf release
        run: echo ${{ env.isWerewolfReleasePR }}

      - name: Echo spyfall release
        run: echo ${{ env.isSpyfallReleasePR }}

      - name: Create Assets
        id: createassets
        run: ./scripts/create_pr_assets.kts $GITHUB_ENV ${{ env.isSpyfallReleasePR }} ${{ env.isWerewolfReleasePR }}

      - name: Sign spyfall legacy release apk
        if: ${{ env.isSpyfallReleasePR }}
        run: ./scripts/sign_app.main.kts ${{ env.spyfallLegacyReleaseApkPath }} ${{ secrets.KEYSTORE }} ${{ secrets.KEYSTORE_PASSWORD }} ${{ secrets.KEYALIAS }} ${{ secrets.KEY_PASSWORD }} "signedSpyfallLegacyReleaseApkPath" $GITHUB_ENV

      - name: Upload spyfall legacy release signed apk
        if: ${{ env.isSpyfallReleasePR }}
        uses: actions/upload-artifact@v3
        with:
          name: Spyfall Legacy Release Apk
          path: ${{ env.signedSpyfallLegacyReleaseApkPath }}

      - name: Sign spyfall refactor release apk
        if: ${{ env.isSpyfallReleasePR }}
        run: ./scripts/sign_app.main.kts ${{ env.spyfallRefactorReleaseApkPath }} ${{ secrets.KEYSTORE }} ${{ secrets.KEYSTORE_PASSWORD }} ${{ secrets.KEYALIAS }} ${{ secrets.KEY_PASSWORD }} "signedSpyfallRefactorReleaseApkPath" $GITHUB_ENV

      - name: Upload spyfall refactor release signed apk
        if: ${{ env.isSpyfallReleasePR }}
        uses: actions/upload-artifact@v3
        with:
          name: Spyfall Refactor Release Apk
          path: ${{ env.signedSpyfallRefactorReleaseApkPath }}

      - name: Sign spyfall legacy release aab
        if: ${{ env.isSpyfallReleasePR }}
        run: ./scripts/sign_app.main.kts ${{ env.spyfallLegacyReleaseAabPath }} ${{ secrets.KEYSTORE }} ${{ secrets.KEYSTORE_PASSWORD }} ${{ secrets.KEYALIAS }} ${{ secrets.KEY_PASSWORD }} "signedSpyfallLegacyReleaseAabPath" $GITHUB_ENV

      - name: Upload spyfall legacy release signed aab
        if: ${{ env.isSpyfallReleasePR }}
        uses: actions/upload-artifact@v3
        with:
          name: Spyfall Legacy Release aab
          path: ${{ env.signedSpyfallLegacyReleaseAabPath }}

      - name: Sign spyfall refactor release aab
        if: ${{ env.isSpyfallReleasePR }}
        run: ./scripts/sign_app.main.kts ${{ env.spyfallRefactorReleaseAabPath }} ${{ secrets.KEYSTORE }} ${{ secrets.KEYSTORE_PASSWORD }} ${{ secrets.KEYALIAS }} ${{ secrets.KEY_PASSWORD }} "signedSpyfallRefactorReleaseAabPath" $GITHUB_ENV

      - name: Upload spyfall refactor release signed aab
        if: ${{ env.isSpyfallReleasePR }}
        uses: actions/upload-artifact@v3
        with:
          name: Spyfall Refactor Release aab
          path: ${{ env.signedSpyfallRefactorReleaseAabPath }}

      - name: Upload spyfall legacy debug apk
        uses: actions/upload-artifact@v3
        with:
          name: Spyfall Legacy Debug Apk
          path: ${{ env.spyfallLegacyDebugApkPath }}

      - name: Upload spyfall refactor debug apk
        uses: actions/upload-artifact@v3
        with:
          name: Spyfall Refactor Debug Apk
          path: ${{ env.spyfallRefactorDebugApkPath }}

      - name: Upload werewolf debug apk
        id: uploadlastasset
        uses: actions/upload-artifact@v3
        with:
          name: Werewolf Debug Apk
          path: ${{ env.werewolfDebugApkPath }}

      - name: Sign Werewolf release apk
        if: ${{ env.isWerewolfReleasePR }}
        run: ./scripts/sign_app.main.kts ${{ env.werewolfReleaseApkPath }} ${{ secrets.KEYSTORE }} ${{ secrets.KEYSTORE_PASSWORD }} ${{ secrets.KEYALIAS }} ${{ secrets.KEY_PASSWORD }} "signedWerewolfReleaseApkPath" $GITHUB_ENV

      - name: Upload werewolf release signed apk
        if: ${{ env.isWerewolfReleasePR }}
        uses: actions/upload-artifact@v3
        with:
          name: Werewolf Release Apk
          path: ${{ env.signedWerewolfReleaseApkPath }}

      - name: Sign Werewolf release aab
        if: env.isWerewolfReleasePR
        run: ./scripts/sign_app.main.kts ${{ env.werewolfReleaseAabPath }} ${{ secrets.KEYSTORE }} ${{ secrets.KEYSTORE_PASSWORD }} ${{ secrets.KEYALIAS }} ${{ secrets.KEY_PASSWORD }} "signedSWerewolfReleaseAabPath" $GITHUB_ENV

      - name: Upload werewolf release signed aab
        if: ${{ env.isWerewolfReleasePR }}
        uses: actions/upload-artifact@v3
        with:
          name: Werewolf Release Aab
          path: ${{ env.signedSWerewolfReleaseAabPath }}

      - name: Update artifacts comment on PR
        run: ./scripts/update_artifacts_comment.main.kts "${GITHUB_REPOSITORY}" ${{ secrets.GITHUB_TOKEN }} ${{ github.event.pull_request.number }} "${GITHUB_RUN_ID}"

  style:
    runs-on: [ ubuntu-latest ]
    steps:
      - uses: actions/checkout@v2
      - name: set up JDK 11
        uses: actions/setup-java@v1
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '11'

      - name: Create service key json
        id: create-json
        uses: jsdaniell/create-json@v1.2.2
        with:
          name: "service_key.json"
          json: ${{ secrets.SERVICE_ACCOUNT_KEY }}

      - name: Download secret files
        run: ./scripts/get_secret_files.main.kts service_key.json

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Detekt All
        run: ./gradlew detektAll

      - name: Checkstyle
        run: ./gradlew checkstyleAll

  test:
    runs-on: macos-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Create service key json
        id: create-json
        uses: jsdaniell/create-json@v1.2.2
        with:
          name: "service_key.json"
          json: ${{ secrets.SERVICE_ACCOUNT_KEY }}

      - name: Download secret files
        run: ./scripts/get_secret_files.main.kts service_key.json

      - name: Set Up Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Copy  gradle properties file
        run: mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties

      - name: set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '11'

      - name: Unit tests
        run: ./gradlew test --stacktrace
